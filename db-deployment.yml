# Define a 'Persistent Volume Claim'(PVC) for Mysql Storage, dynamically provisioned by cluster
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim # name of PVC essential for identifying the storage data
  labels:
    app: mysql
    tier: database
spec:
  accessModes:
    - ReadWriteOnce   #This specifies the mode of the claim that we are trying to create.
  resources:
    requests:
      storage: 10Gi    #This will tell kubernetes about the amount of space we are trying to claim.
---
#Configure 'Deployment' of MySQL server
apiVersion: apps/v1

kind: Deployment

metadata:
  name: mysql
  labels:
    app: mysql
    tier: database

spec:
  selector:
    matchLabels:
      app: mysql
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels: #Must match 'Service' and 'Deployment' selectors
        app: mysql
        tier: database
    spec:
      containers:
        - image: mysql:latest #image from docker-hub (if not work use 5.7)
          args: [ "--ignore-db-dir=lost+found" ]
          name: mysql
          imagePullPolicy: Always
          env:
            # Use secret in real usage
            - name: MYSQL_ROOT_PASSWORD
              value: root
            - name: MYSQL_DATABASE
              value: user
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts: #Mounting volume obtained from Persistence Volume Claim
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql #This is the path in the container on which the mounting will take place.
      volumes:
        - name: mysql-persistent-storage #Obtained 'volume' from PVC
          persistentVolumeClaim:
            claimName: mysql-pv-claim

---
#Configure 'Service' of MySQL to other services
apiVersion: v1

kind: Service

metadata:
  name: mysql #DNS name
  labels:
    app: mysql
    tier: database

spec:
  ports:
    - port: 3306
      targetPort: 3306
  selector:
    app: mysql
    tier: database
  clusterIP: None
